import { IConnection, HttpError } from "@nestia/fetcher";
import typia, { tags } from "typia";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

;
import { IShoppingSaleSnapshot_alt__agt_ } from "../../../../structures/IShoppingSaleSnapshot_alt__agt_";
/**
 * Lists all snapshots (versions) for a product/sale, ordered chronologically. Used for history/audit/viewing and comparing previous states.
 *
 * @param saleId Unique identifier of the sale/product.
 * @path /shopping/sales/:saleId/snapshots
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function getBySaleid(connection: IConnection, saleId: string & tags.Format<"uuid">): Promise<getBySaleid.Output> {
    return !!connection.simulate ? getBySaleid.simulate(connection, saleId) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...getBySaleid.METADATA,
        path: getBySaleid.path(saleId),
        status: null
    });
}
export namespace getBySaleid {
    export type Output = IShoppingSaleSnapshot_alt__agt_;
    
    ;
    export const METADATA = {
        method: "GET",
        path: "/shopping/sales/:saleId/snapshots",
        request: null,
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = (saleId: string & tags.Format<"uuid">) => `/shopping/sales/${encodeURIComponent(saleId ?? "null")}/snapshots`;
    export const random = (g?: Partial<typia.IRandomGenerator>): IShoppingSaleSnapshot_alt__agt_ => typia.random<IShoppingSaleSnapshot_alt__agt_>(g);
    export const simulate = (connection: IConnection, saleId: string & tags.Format<"uuid">): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: getBySaleid.path(saleId),
            contentType: "application/json"
        });
        try {
            assert.param("saleId")(() => typia.assert(saleId));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
