import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

;
import { IShoppingSale } from "../../../structures/IShoppingSale";
import { IPageIShoppingSale } from "../../../structures/IPageIShoppingSale";
export * as snapshots from "./snapshots";
/**
 * Allows a seller to register a new product for sale. Handles section and seller linkage. Creates an initial snapshot.
 *
 * @param body Allows a seller to register a new product for sale. Handles section and seller linkage. Creates an initial snapshot.
 * @path /shopping/sales
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function post(connection: IConnection, body: post.Input): Promise<post.Output> {
    return !!connection.simulate ? post.simulate(connection, body) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...post.METADATA,
        path: post.path(),
        status: null
    }, body);
}
export namespace post {
    export type Input = IShoppingSale.ICreate;
    export type Output = IShoppingSale;
    
    ;
    export const METADATA = {
        method: "POST",
        path: "/shopping/sales",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = () => "/shopping/sales";
    export const random = (g?: Partial<typia.IRandomGenerator>): IShoppingSale => typia.random<IShoppingSale>(g);
    export const simulate = (connection: IConnection, body: post.Input): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: post.path(),
            contentType: "application/json"
        });
        try {
            assert.body(() => typia.assert(body));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
/**
 * Returns a paginated list of products/sales, supporting filtering by section, seller, status, keyword, etc. Returns sale summaries.
 *
 * @param body Returns a paginated list of products/sales, supporting filtering by section, seller, status, keyword, etc. Returns sale summaries.
 * @path /shopping/sales
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function patch(connection: IConnection, body: patch.Input): Promise<patch.Output> {
    return !!connection.simulate ? patch.simulate(connection, body) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...patch.METADATA,
        path: patch.path(),
        status: null
    }, body);
}
export namespace patch {
    export type Input = IShoppingSale.IRequest;
    export type Output = IPageIShoppingSale.ISummary;
    
    ;
    export const METADATA = {
        method: "PATCH",
        path: "/shopping/sales",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = () => "/shopping/sales";
    export const random = (g?: Partial<typia.IRandomGenerator>): IPageIShoppingSale.ISummary => typia.random<IPageIShoppingSale.ISummary>(g);
    export const simulate = (connection: IConnection, body: patch.Input): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: patch.path(),
            contentType: "application/json"
        });
        try {
            assert.body(() => typia.assert(body));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
/**
 * Fetches detailed product/sale info, including latest snapshot, section, seller, and category mapping.
 *
 * @param saleId Unique identifier of the sale/product.
 * @path /shopping/sales/:saleId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function getBySaleid(connection: IConnection, saleId: string & tags.Format<"uuid">): Promise<getBySaleid.Output> {
    return !!connection.simulate ? getBySaleid.simulate(connection, saleId) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...getBySaleid.METADATA,
        path: getBySaleid.path(saleId),
        status: null
    });
}
export namespace getBySaleid {
    export type Output = IShoppingSale;
    
    ;
    export const METADATA = {
        method: "GET",
        path: "/shopping/sales/:saleId",
        request: null,
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = (saleId: string & tags.Format<"uuid">) => `/shopping/sales/${encodeURIComponent(saleId ?? "null")}`;
    export const random = (g?: Partial<typia.IRandomGenerator>): IShoppingSale => typia.random<IShoppingSale>(g);
    export const simulate = (connection: IConnection, saleId: string & tags.Format<"uuid">): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: getBySaleid.path(saleId),
            contentType: "application/json"
        });
        try {
            assert.param("saleId")(() => typia.assert(saleId));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
