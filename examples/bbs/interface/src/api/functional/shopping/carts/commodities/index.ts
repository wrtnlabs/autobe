import { IConnection, HttpError } from "@nestia/fetcher";
import typia, { tags } from "typia";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

;
import { IShoppingCartCommodity } from "../../../../structures/IShoppingCartCommodity";
/**
 * Adds a single product (by snapshot) and specific option choices to the given customer's cart. Handles inventory validation, quantity, and creates a pending cartCommodity. Option selections are validated according to the snapshot options/rules.
 *
 * @param customerId Unique identifier of the customer who owns the cart.
 * @param body Adds a single product (by snapshot) and specific option choices to the given customer's cart. Handles inventory validation, quantity, and creates a pending cartCommodity. Option selections are validated according to the snapshot options/rules.
 * @path /shopping/carts/:customerId/commodities
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function postByCustomerid(connection: IConnection, customerId: string & tags.Format<"uuid">, body: postByCustomerid.Input): Promise<postByCustomerid.Output> {
    return !!connection.simulate ? postByCustomerid.simulate(connection, customerId, body) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...postByCustomerid.METADATA,
        path: postByCustomerid.path(customerId),
        status: null
    }, body);
}
export namespace postByCustomerid {
    export type Input = IShoppingCartCommodity.ICreate;
    export type Output = IShoppingCartCommodity;
    
    ;
    export const METADATA = {
        method: "POST",
        path: "/shopping/carts/:customerId/commodities",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = (customerId: string & tags.Format<"uuid">) => `/shopping/carts/${encodeURIComponent(customerId ?? "null")}/commodities`;
    export const random = (g?: Partial<typia.IRandomGenerator>): IShoppingCartCommodity => typia.random<IShoppingCartCommodity>(g);
    export const simulate = (connection: IConnection, customerId: string & tags.Format<"uuid">, body: postByCustomerid.Input): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: postByCustomerid.path(customerId),
            contentType: "application/json"
        });
        try {
            assert.param("customerId")(() => typia.assert(customerId));
            assert.body(() => typia.assert(body));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
