import { IConnection, HttpError } from "@nestia/fetcher";
import typia, { tags } from "typia";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

;
import { IShoppingCouponTicket } from "../../../../structures/IShoppingCouponTicket";
/**
 * Allocates/assigns a coupon (public or code) to a customer as a coupon ticket. Record validity and restrict usage as necessary.
 *
 * @param customerId Customer ID receiving the coupon ticket.
 * @param body Allocates/assigns a coupon (public or code) to a customer as a coupon ticket. Record validity and restrict usage as necessary.
 * @path /shopping/customers/:customerId/coupon-tickets
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function postByCustomerid(connection: IConnection, customerId: string & tags.Format<"uuid">, body: postByCustomerid.Input): Promise<postByCustomerid.Output> {
    return !!connection.simulate ? postByCustomerid.simulate(connection, customerId, body) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...postByCustomerid.METADATA,
        path: postByCustomerid.path(customerId),
        status: null
    }, body);
}
export namespace postByCustomerid {
    export type Input = IShoppingCouponTicket.ICreate;
    export type Output = IShoppingCouponTicket;
    
    ;
    export const METADATA = {
        method: "POST",
        path: "/shopping/customers/:customerId/coupon-tickets",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = (customerId: string & tags.Format<"uuid">) => `/shopping/customers/${encodeURIComponent(customerId ?? "null")}/coupon-tickets`;
    export const random = (g?: Partial<typia.IRandomGenerator>): IShoppingCouponTicket => typia.random<IShoppingCouponTicket>(g);
    export const simulate = (connection: IConnection, customerId: string & tags.Format<"uuid">, body: postByCustomerid.Input): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: postByCustomerid.path(customerId),
            contentType: "application/json"
        });
        try {
            assert.param("customerId")(() => typia.assert(customerId));
            assert.body(() => typia.assert(body));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
