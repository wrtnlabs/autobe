import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

;
import { IShoppingMember } from "../../../api/structures/IShoppingMember";
import { IPageIShoppingMember } from "../../../api/structures/IPageIShoppingMember";

;
@Controller("/shopping/members")
export class ShoppingMembersController {
    /**
     * Creates a new shopping mall member account. Records member details, links to a citizen record if identity verification has been performed, supports channel-specific membership registration. Email registration is handled separately.
     *
     * @param body Creates a new shopping mall member account. Records member details, links to a citizen record if identity verification has been performed, supports channel-specific membership registration. Email registration is handled separately.
     * @nestia Generated by Nestia - https://github.com/samchon/nestia
    */
    @TypedRoute.Post()
    public async post(
    @TypedBody()
    body: IShoppingMember.ICreate): Promise<IShoppingMember> {
        body;
        return typia.random<IShoppingMember>();
    }
    /**
     * Retrieves a paginated list of mall members, allowing filtering, sorting, and pagination.
     *
     * @param body Retrieves a paginated list of mall members, allowing filtering, sorting, and pagination.
     * @nestia Generated by Nestia - https://github.com/samchon/nestia
    */
    @TypedRoute.Patch()
    public async patch(
    @TypedBody()
    body: IShoppingMember.IRequest): Promise<IPageIShoppingMember.ISummary> {
        body;
        return typia.random<IPageIShoppingMember.ISummary>();
    }
    /**
     * Retrieves details for a specific member. Includes identity linkage, channels, and other personal info.
     *
     * @param memberId Unique identifier of the member.
     * @nestia Generated by Nestia - https://github.com/samchon/nestia
    */
    @TypedRoute.Get(":memberId")
    public async getByMemberid(
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">): Promise<IShoppingMember> {
        memberId;
        return typia.random<IShoppingMember>();
    }
}
