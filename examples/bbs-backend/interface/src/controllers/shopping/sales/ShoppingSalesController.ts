import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

;
import { IShoppingSale } from "../../../api/structures/IShoppingSale";
import { IPageIShoppingSale } from "../../../api/structures/IPageIShoppingSale";

;
@Controller("/shopping/sales")
export class ShoppingSalesController {
    /**
     * Allows a seller to register a new product for sale. Handles section and seller linkage. Creates an initial snapshot.
     *
     * @param body Allows a seller to register a new product for sale. Handles section and seller linkage. Creates an initial snapshot.
     * @nestia Generated by Nestia - https://github.com/samchon/nestia
    */
    @TypedRoute.Post()
    public async post(
    @TypedBody()
    body: IShoppingSale.ICreate): Promise<IShoppingSale> {
        body;
        return typia.random<IShoppingSale>();
    }
    /**
     * Returns a paginated list of products/sales, supporting filtering by section, seller, status, keyword, etc. Returns sale summaries.
     *
     * @param body Returns a paginated list of products/sales, supporting filtering by section, seller, status, keyword, etc. Returns sale summaries.
     * @nestia Generated by Nestia - https://github.com/samchon/nestia
    */
    @TypedRoute.Patch()
    public async patch(
    @TypedBody()
    body: IShoppingSale.IRequest): Promise<IPageIShoppingSale.ISummary> {
        body;
        return typia.random<IPageIShoppingSale.ISummary>();
    }
    /**
     * Fetches detailed product/sale info, including latest snapshot, section, seller, and category mapping.
     *
     * @param saleId Unique identifier of the sale/product.
     * @nestia Generated by Nestia - https://github.com/samchon/nestia
    */
    @TypedRoute.Get(":saleId")
    public async getBySaleid(
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">): Promise<IShoppingSale> {
        saleId;
        return typia.random<IShoppingSale>();
    }
}
