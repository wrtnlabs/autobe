import { IConnection, HttpError } from "@nestia/fetcher";
import typia, { tags } from "typia";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

;
import { IShoppingMemberEmail } from "../../../../structures/IShoppingMemberEmail";
/**
 * Registers a new email address for a given member. Can be used for login, recovery, or notifications. Supports multiple emails per member.
 *
 * @param memberId Unique identifier of the member.
 * @param body Registers a new email address for a given member. Can be used for login, recovery, or notifications. Supports multiple emails per member.
 * @path /shopping/members/:memberId/emails
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function postByMemberid(connection: IConnection, memberId: string & tags.Format<"uuid">, body: postByMemberid.Input): Promise<postByMemberid.Output> {
    return !!connection.simulate ? postByMemberid.simulate(connection, memberId, body) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...postByMemberid.METADATA,
        path: postByMemberid.path(memberId),
        status: null
    }, body);
}
export namespace postByMemberid {
    export type Input = IShoppingMemberEmail.ICreate;
    export type Output = IShoppingMemberEmail;
    
    ;
    export const METADATA = {
        method: "POST",
        path: "/shopping/members/:memberId/emails",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = (memberId: string & tags.Format<"uuid">) => `/shopping/members/${encodeURIComponent(memberId ?? "null")}/emails`;
    export const random = (g?: Partial<typia.IRandomGenerator>): IShoppingMemberEmail => typia.random<IShoppingMemberEmail>(g);
    export const simulate = (connection: IConnection, memberId: string & tags.Format<"uuid">, body: postByMemberid.Input): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: postByMemberid.path(memberId),
            contentType: "application/json"
        });
        try {
            assert.param("memberId")(() => typia.assert(memberId));
            assert.body(() => typia.assert(body));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
