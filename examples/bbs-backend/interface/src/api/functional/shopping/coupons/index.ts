import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

;
import { IShoppingCoupon } from "../../../structures/IShoppingCoupon";
/**
 * Issues a new discount coupon, specifying conditions, limits, and time windows. Supports public or code-based distribution.
 *
 * @param body Issues a new discount coupon, specifying conditions, limits, and time windows. Supports public or code-based distribution.
 * @path /shopping/coupons
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function post(connection: IConnection, body: post.Input): Promise<post.Output> {
    return !!connection.simulate ? post.simulate(connection, body) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...post.METADATA,
        path: post.path(),
        status: null
    }, body);
}
export namespace post {
    export type Input = IShoppingCoupon.ICreate;
    export type Output = IShoppingCoupon;
    
    ;
    export const METADATA = {
        method: "POST",
        path: "/shopping/coupons",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = () => "/shopping/coupons";
    export const random = (g?: Partial<typia.IRandomGenerator>): IShoppingCoupon => typia.random<IShoppingCoupon>(g);
    export const simulate = (connection: IConnection, body: post.Input): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: post.path(),
            contentType: "application/json"
        });
        try {
            assert.body(() => typia.assert(body));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
