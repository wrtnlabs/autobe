import { IConnection, HttpError } from "@nestia/fetcher";
import typia, { tags } from "typia";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

;
import { IShoppingOrder } from "../../../../structures/IShoppingOrder";
/**
 * Converts the current active cart items into an order application for the customer. Triggers inventory check, locks selected items, snapshots cart for history, and creates an order ready for payment.
 *
 * @param customerId Customer ID initiating the order application.
 * @param body Converts the current active cart items into an order application for the customer. Triggers inventory check, locks selected items, snapshots cart for history, and creates an order ready for payment.
 * @path /shopping/customers/:customerId/orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
*/
export async function postByCustomerid(connection: IConnection, customerId: string & tags.Format<"uuid">, body: postByCustomerid.Input): Promise<postByCustomerid.Output> {
    return !!connection.simulate ? postByCustomerid.simulate(connection, customerId, body) : PlainFetcher.fetch({
        ...connection,
        headers: {
            ...connection.headers,
            "Content-Type": "application/json"
        }
    }, {
        ...postByCustomerid.METADATA,
        path: postByCustomerid.path(customerId),
        status: null
    }, body);
}
export namespace postByCustomerid {
    export type Input = IShoppingOrder.ICreate;
    export type Output = IShoppingOrder;
    
    ;
    export const METADATA = {
        method: "POST",
        path: "/shopping/customers/:customerId/orders",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false
        }
    } as const;
    
    ;
    export const path = (customerId: string & tags.Format<"uuid">) => `/shopping/customers/${encodeURIComponent(customerId ?? "null")}/orders`;
    export const random = (g?: Partial<typia.IRandomGenerator>): IShoppingOrder => typia.random<IShoppingOrder>(g);
    export const simulate = (connection: IConnection, customerId: string & tags.Format<"uuid">, body: postByCustomerid.Input): Output => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: postByCustomerid.path(customerId),
            contentType: "application/json"
        });
        try {
            assert.param("customerId")(() => typia.assert(customerId));
            assert.body(() => typia.assert(body));
        }
        catch (exp) {
            if (!typia.is<HttpError>(exp))
                throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message
            } as any;
        }
        return random("object" === typeof connection.simulate && null !== connection.simulate ? connection.simulate : undefined);
    };
}
